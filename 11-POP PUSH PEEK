#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    int *arr;
};

typedef struct Stack Stack;

Stack *createStack() {
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    stack->top = -1;
    stack->arr = (int *)malloc(MAX_SIZE * sizeof(int));
    return stack;
}

void push(Stack *stack, int data) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack->top++;
    stack->arr[stack->top] = data;
}

int pop(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack Underflow\n");
        return -1;
    }
    int data = stack->arr[stack->top];
    stack->top--;
    return data;
}

int peek(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack->arr[stack->top];
}

void printStack(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack is empty\n");
        return;
    }
    for (int i = 0; i <= stack->top; i++) {
        printf("%d ", stack->arr[i]);
    }
    printf("\n");
}

int main() {
    Stack *stack = createStack();

    push(stack, 1);
    push(stack, 2);
    push(stack, 3);

    printf("Stack: ");
    printStack(stack);

    int popped_element = pop(stack);
    printf("Popped element: %d\n", popped_element);

    printf("Stack: ");
    printStack(stack);

    int peeked_element = peek(stack);
    printf("Peeked element: %d\n", peeked_element);

    return 0;
}
